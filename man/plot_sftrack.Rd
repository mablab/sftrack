% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_tj.R
\name{plot_sftrack}
\alias{plot_sftrack}
\alias{plot.sftrack}
\alias{plot.sftraj}
\title{methods for plot sftrack/sftraj}
\usage{
\method{plot}{sftrack}(x, y, ...)

\method{plot}{sftraj}(x, y, ..., step_mode = FALSE)
}
\arguments{
\item{x}{sftrack/sftraj object}

\item{y}{ignored}

\item{...}{arguments to passed to plot}

\item{step_mode}{TRUE/FALSE, whether to plot in step_mode, See details}
}
\description{
methods for plot sftrack/sftraj

methods for plot sftrack/sftraj
}
\details{
step mode refers to considering the trajectory as individual 'steps', in the case of plot this means it will
plot each line & point individually. This approach is much slower to plot when n(steps)>10,000.
The alternative method is to merge the steps into a multilinestring of continuous lines. This is much faster to plot.
}
\examples{
library(sftrack)
library(sf)
data("raccoon")
raccoon$timestamp <- as.POSIXct(raccoon$timestamp, "EST")
burstz <- c(id = "animal_id")
my_sftrack <- as_sftrack(raccoon,
  time = "timestamp",
  coords = c("longitude", "latitude"),
  burst = burstz
)

# Plotting with sftrack is just like sf. `...` will accept most arguments as plot.sf

plot(my_sftrack, axes = TRUE, lwd = 5, cex = 5, bgc = "gray80")

# sftraj will as well for the most part, however as its a more
# complex structure to speed up plotting.
my_sftraj <- as_sftraj(raccoon,
   time = "timestamp",
   coords = c("longitude", "latitude"),
  burst = burstz
 )

plot(st_as_sf(raccoon, coords = c("longitude", "latitude"),na.fail=FALSE )['animal_id'])

new <- raccoon[!is.na(raccoon$latitude),]
plot(st_as_sf(new, coords = c("longitude", "latitude"))['animal_id'])
 plot(my_sftraj, axes = TRUE, lwd = 5, cex = 5, bgc = "gray80", graticule = TRUE, step_mode=TRUE)

  x = my_sftraj

x <- x[order(x[[attr(x, "time")]]), ]
crs <-  if(is.na(st_crs(x))) NA_crs_ else st_crs(x)
ret <- stats::aggregate(st_geometry(x), list(burst = burst_labels(x, factor = TRUE)), function(y) {
  # y = st_geometry(x)[burst_labels(x, factor = TRUE)=='TTP-041_s']
  geom <- y[st_is(y, "LINESTRING")]
  if (length(geom) > 1) {
    st_line_merge(st_combine(geom))
  } else {
    st_sfc(st_multilinestring(list(st_linestring())), crs = crs)
  }
})

df1 <-  st_sf(ret, crs = crs, sf_column_name = "geometry")
print(options("digits")$digits)
obj <- df1
class(obj)
tt <- st_geometry(obj)
class(st_geometry(obj))
attr(st_geometry(obj), "bbox")
attributes(st_geometry(obj))
st_crs(st_geometry(obj))
stop()
}
